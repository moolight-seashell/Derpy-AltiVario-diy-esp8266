#include "screen.h"

#define main_screen 0
#define alti_graph 1
#define sumary_screen 7
#define settings_menu 2
#define settings_sons 3
#define settings_altitude 4
#define settings_date 5
#define settings_auto_defil 6

#define m_retour 0
#define m_sons 1
#define m_altitude 2
#define m_date 3
#define m_defil_auto 4

const unsigned char derpy_mlp [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x38, 0x9e, 0xe3, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x48, 0x82, 0x24, 0x45, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x70, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x82, 0x24, 0x29,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x48, 0x9e, 0xe3, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x48, 0x82, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x48, 0x82, 0x24, 0x10,
   0x00, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x38, 0x9e, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x08,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x21, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x00,
   0x88, 0x88, 0x23, 0x0e, 0x00, 0x00, 0xe0, 0x00, 0x41, 0xf0, 0x0f, 0x24,
   0x00, 0x00, 0x00, 0x00, 0x88, 0x94, 0x24, 0x11, 0x00, 0x00, 0x30, 0x03,
   0x85, 0x18, 0xf0, 0x09, 0x00, 0x00, 0x00, 0x00, 0x88, 0x94, 0x24, 0x11,
   0x00, 0xc0, 0x17, 0x04, 0x85, 0x20, 0xd0, 0x0e, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x9c, 0x23, 0x11, 0x00, 0x60, 0x18, 0x08, 0x09, 0xff, 0x90, 0x18,
   0x00, 0x00, 0x00, 0x00, 0x50, 0xa2, 0x24, 0x11, 0x00, 0x20, 0x20, 0x10,
   0x02, 0xfc, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xa2, 0x24, 0x11,
   0x00, 0x40, 0x40, 0x20, 0x02, 0x96, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x20, 0xa2, 0x24, 0x0e, 0x00, 0x80, 0x80, 0x20, 0x06, 0x92, 0xe3, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41,
   0x0c, 0xf2, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x06, 0x72, 0x1c, 0xc2, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4a, 0x14, 0xc2, 0x03, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x8c,
   0x24, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x80, 0x60, 0x8e, 0x22, 0x04, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x99, 0x22, 0xf8, 0xe0, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x11,
   0x23, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x0c, 0x22, 0x11, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x04, 0x11, 0x00, 0x70, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x05,
   0x1d, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xe0, 0x47, 0x0a, 0x0a, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x78, 0x10, 0x08, 0x10, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x09,
   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x00, 0x3c, 0x1e, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x13, 0x20, 0x00, 0x10, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x10, 0x00,
   0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x10, 0xc0, 0x48, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x28, 0x00, 0x00, 0x84, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x48, 0x00,
   0x40, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x08, 0x40, 0x28, 0x00, 0xb0, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x08, 0x82, 0x08, 0x0d, 0x04, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x40, 0x08, 0x44,
   0x00, 0x0a, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x68, 0x40, 0x1e, 0x4c, 0x00, 0x12, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x50, 0x40, 0x01, 0xfc, 0x00, 0x32, 0x08, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x40, 0x01, 0x0e,
   0x1f, 0x62, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x20, 0x68, 0x01, 0x07, 0x10, 0x82, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x20, 0x28, 0x81, 0x02, 0x08, 0x02, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x41, 0x02,
   0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x0c, 0x14, 0x81, 0x02, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x03, 0x04, 0x81, 0x02, 0x02, 0x01, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x02, 0x81, 0x02,
   0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
   0x00, 0x02, 0x81, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0x80, 0x01, 0x81, 0x02, 0x84, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x79, 0x80, 0x80, 0x02,
   0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x06, 0x80, 0x80, 0x01, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x10, 0x44, 0x1c, 0x8e,
   0x48, 0xc8, 0x93, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00,
   0x00, 0x6c, 0x22, 0x91, 0x49, 0x48, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x6c, 0x00, 0x00, 0x54, 0x22, 0x91, 0x49, 0x48, 0x90, 0x08,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x44, 0x22, 0x91,
   0x4a, 0x48, 0xf3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x44, 0x22, 0x91, 0x4c, 0x48, 0x92, 0x08, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x22, 0x91, 0x4c, 0x48, 0x92, 0x08,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x1c, 0x8e,
   0xc8, 0xcb, 0x93, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00
};

void draw_main_screen(){
    u8g2.clearBuffer();


    switch(current_menu){
        case main_screen:
            draw_header_0();
            draw_screen_0();
            break;
        case alti_graph:
            draw_header_0();
            draw_screen_1();
            break;
        case sumary_screen:
            draw_header_0();
            draw_screen_2();
            break;
        case settings_menu:
            draw_header_settings();
            draw_screen_settings();
            break;
        case settings_sons:
            draw_header_settings();
            draw_screen_settings_sons();
            break;
        case settings_date:
            draw_header_settings();
            draw_screen_settings_date();
            break;
        case settings_auto_defil:
            draw_header_settings();
            draw_screen_settings_autodefil();
            break;
        case settings_altitude:
            draw_header_settings();
            draw_screen_settings_alti();
            break;
        
    }


    u8g2.sendBuffer();
}



void draw_start_screen(){

    u8g2.clearBuffer();
    u8g2.drawXBMP( 0, 0, 128, 64, derpy_mlp); // position, largeur, hauteur
    u8g2.sendBuffer();
}



void draw_header_0(){
  u8g2.drawHLine(0,12,128);

  u8g2.setFont(u8g_font_courR08);
  //u8g2.setFont(u8g_font_osb21);
  char tmp[22];
  sprintf(tmp, "%d\260C %d%%  %2d:%02d  %3d%%" , g_temperature , g_humidity,  g_hour , g_minute, g_batt);
  u8g2.drawStr( 0, 8, tmp);
}



void draw_screen_0(){
    //======================================= alti vario 
    u8g2.drawHLine(0,12,128);

    u8g2.setFont(u8g_font_courR18);
    //u8g2.setFont(u8g_font_osb21);
    char tmp [5];
    dtostrf(g_vario, 4, 1, tmp);
    if(g_vario >= 0){
        tmp[0] = '+';
    } else {
        tmp[0] = '-';
    }

    u8g2.drawStr(30, 30, tmp);
    sprintf(tmp, "%4.4d", int(g_altitude) );
    u8g2.drawStr(30, 50, tmp);
    u8g2.setFont(u8g_font_courR10);
    u8g2.drawStr(95, 30, "m/s");
    u8g2.drawStr(95, 50, "m");

    //======================================= date
    u8g2.setFont(u8g_font_courR08);
    sprintf(tmp, "%2.2d", int(g_date) );
    u8g2.drawStr( 110, 42, tmp);
    sprintf(tmp, "%2.2d", int(g_month) );
    u8g2.drawStr( 110, 52, tmp);

    //======================================= history
    u8g2.drawVLine(20,12,40);

    int j = 0;
    for(int i = 45; i > 12 ; i -= 6){

        if(g_vario_history_5[j] > 0) {
            u8g2.drawBox(10 , i, g_vario_history_5[j] * 1.6 , 5);
        }
        if(g_vario_history_5[j] < 0) {
            u8g2.drawBox(10 + g_vario_history_5[j] * 1.6 , i, -g_vario_history_5[j] * 1.6 , 5);
        }
        if(g_vario_history_5[j] == 0) {
            u8g2.drawVLine(10 , i, 5);
        }
        j += 1;
    }

    //======================================= scale
    for( int i = 52; i > 0 ; i -= 12){
        u8g2.drawVLine(i,56,2);
    }
    u8g2.drawVLine(64,52,12);
    u8g2.drawVLine(65,52,12);
    
    for( int i = 77; i < 128 ; i += 12){
        u8g2.drawVLine(i,56,2);
    }

    //======================================= progress
    if(g_vario_lim5 > 0) {
        u8g2.drawBox(65,59, g_vario_lim5 * 12, 5); //(60 px / 5)
    }
    if(g_vario_lim5 < 0) {
        int x = 64 + g_vario_lim5 * 12; //(60 px / 5)
        u8g2.drawBox(x,59, 64 - x , 5); 
    }
}

void draw_screen_1(){  
    u8g2.drawVLine(0,12,42);
    u8g2.drawHLine(0,54,101);

    u8g2.setFont(u8g_font_courR08);

    char tmp[22];

    dtostrf(g_vario, 4, 1, tmp);//
    if(g_vario >= 0){
        tmp[0] = '+';
    } else {
        tmp[0] = '-';
    }
    strcat(&tmp[4], " m/s   ");
    sprintf(&tmp[11], "%4.4d", int(g_altitude) );
    strcat(&tmp[15], " m");
    u8g2.drawStr( 0, 64, tmp);

    u8g2.drawStr( 102, 20, "max");
    sprintf(tmp, "%4.4d", g_altitude_hmax );
    u8g2.drawStr( 102, 30, tmp);
    sprintf(tmp, "%4.4d", g_altitude_hmin );
    u8g2.drawStr( 102, 45, "min");
    u8g2.drawStr( 102, 55, tmp);

    if(g_altitude_hmax == 0 or g_altitude_hmin == 0 or g_altitude_hmin == g_altitude_hmax){
        return;
    }

    int y;
    for (int i = 0 ; i < 100 ; i ++){
        if(g_altitude_history[i] == 0){
            continue;
        }
        
        y = map(g_altitude_history[i], g_altitude_hmin, g_altitude_hmax, 53, 13);

        u8g2.drawLine((100 - i),53,(100 - i),y);
        //u8g2.drawPixel((100 - i) +1,y);
    }
}

void draw_screen_2(){
    u8g2.setFont(u8g_font_courR08);
    u8g2.drawStr( 0, 20, "summary");
    u8g2.drawStr( 0, 30, "total fly :");
    u8g2.drawStr( 0, 40, "alti max  :");
    u8g2.drawStr( 0, 50, "vario max :");
    u8g2.drawStr( 0, 60, "vario min :");

    char tmp [20];
    sprintf(tmp, "%d", g_total_fly_min );
    sprintf(tmp, "%5d.%c h", g_total_fly_hour, tmp[0] );
    u8g2.drawStr(70,30, tmp);

    sprintf(tmp, "%6d m", g_total_alti );
    u8g2.drawStr(70,40, tmp);
    
    sprintf(tmp, "+%2.1f m/s", g_total_vario_max );
    u8g2.drawStr(70,50, tmp);

    sprintf(tmp, "-%2.1f m/s", g_total_vario_min );
    u8g2.drawStr(70,60, tmp);
}

void draw_header_settings(){
    u8g2.drawHLine(0,12,128);
    u8g2.setFont(u8g_font_courR08);

    char tmp[22];

    dtostrf(g_vario, 4, 1, tmp);//
    if(g_vario >= 0){
        tmp[0] = '+';
    } else {
        tmp[0] = '-';
    }
    strcat(&tmp[4], " m/s   ");
    sprintf(&tmp[11], "%4.4d", int(g_altitude) );
    strcat(&tmp[15], " m");
    u8g2.drawStr( 0, 8, tmp);

}

const char menu[5][22] = {"sortie","sons et bluetooth","Altitude","date et heure","defilement auto"};

void draw_screen_settings(){
    
    for(int i = 0; i < 5; i ++){
        //selected 
        if(menu_selected == i){
            u8g2.drawBox(0,i*10 + 12,128,10);
            u8g2.setDrawColor(0);
            u8g2.drawStr( 0, i*10 + 20, menu[i]);
            u8g2.setDrawColor(1);
        } else {
            u8g2.drawStr( 0, i*10 + 20, menu[i]);
        }
    }
}

void draw_screen_settings_sons(){
    u8g2.drawStr( 0, 20, "sons :");
    if(tmp_sound){
        u8g2.drawBox(20,22,54,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr( 20, 30, " on");
        u8g2.setDrawColor(1);
        u8g2.drawStr( 74, 30, " off");
    } else {
        u8g2.drawStr( 20, 30, " on");
        u8g2.drawBox(74,22,54,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr( 74, 30, " off");
        u8g2.setDrawColor(1);
    }
    if(sub_menu_selected == 0){
        u8g2.drawStr( 0, 30, "->");
    }
    u8g2.drawStr( 0, 40, "bluetooth :");
    if(tmp_bluetooth){
        u8g2.drawBox(20,42,54,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr( 20, 50, " on");
        u8g2.setDrawColor(1);
        u8g2.drawStr( 74, 50, " off");
    } else {
        u8g2.drawStr( 20, 50, " on");
        u8g2.drawBox(75,42,54,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr( 74, 50, " off");
        u8g2.setDrawColor(1);
    }
    if(sub_menu_selected == 1){
        u8g2.drawStr( 0, 50, "->");
    }
}


void draw_screen_settings_date(){
    u8g2.drawStr( 0, 20, "date :");

    char tmp [6];

    sprintf(tmp, "%02d", tmp_dates[0]);
    if(sub_menu_selected == 0){
        u8g2.drawBox(0,22,14,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr(0, 30, tmp);
        u8g2.setDrawColor(1);
    } else {
        u8g2.drawStr(0, 30, tmp);
    }
    u8g2.drawStr(13, 30, ":");

    sprintf(tmp, "%02d", tmp_dates[1] );
    if(sub_menu_selected == 1){
        u8g2.drawBox(20,22,12,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr(20, 30, tmp);
        u8g2.setDrawColor(1);
    } else {
        u8g2.drawStr(20, 30, tmp);
    }
    u8g2.drawStr(33, 30, ":");

    sprintf(tmp, "%02d", tmp_dates[2] );
    if(sub_menu_selected == 2){
        u8g2.drawBox(40,22,12,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr(40, 30, tmp);
        u8g2.setDrawColor(1);
    } else {
        u8g2.drawStr(40, 30, tmp);
    }

    u8g2.drawStr( 0, 40, "heure :");

    sprintf(tmp, "%02d", tmp_dates[3] );
    if(sub_menu_selected == 3){
        u8g2.drawBox(0,42,12,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr(0, 50, tmp);
        u8g2.setDrawColor(1);
    } else {
        u8g2.drawStr(0, 50, tmp);
    }
    u8g2.drawStr(13, 50, ":");

    sprintf(tmp, "%02d", tmp_dates[4] );
    if(sub_menu_selected == 4){
        u8g2.drawBox(20,42,12,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr(20, 50, tmp);
        u8g2.setDrawColor(1);
    } else {
        u8g2.drawStr(20, 50, tmp);
    }
}

void draw_screen_settings_autodefil(){
    u8g2.drawStr( 0, 20, "defil auto:");
    if(tmp_is_autodefil){
        u8g2.drawBox(20,22,54,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr( 20, 30, " on");
        u8g2.setDrawColor(1);
        u8g2.drawStr( 74, 30, " off");
    } else {
        u8g2.drawStr( 20, 30, " on");
        u8g2.drawBox(74,22,54,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr( 74, 30, " off");
        u8g2.setDrawColor(1);
    }
    if(sub_menu_selected == 0){
        u8g2.drawStr( 0, 30, "->");
    }
    u8g2.drawStr( 0, 40, "defil delay :");
    char tmp[6];
    sprintf(tmp, "%2.1f s", tmp_delay_autodefil );
    if(sub_menu_selected == 1){
        u8g2.drawBox(20,42,54,10);
        u8g2.setDrawColor(0);
        u8g2.drawStr( 20, 50, tmp);
        u8g2.setDrawColor(1);
    } else {
        u8g2.drawStr( 20, 50, tmp);
    }
    if(sub_menu_selected == 1){
        u8g2.drawStr( 0, 50, "->");
    }
}


void draw_screen_settings_alti(){
    u8g2.drawStr( 0, 20, "altitude actuelle:");
    char tmp[8];
    sprintf(tmp, "%4.4d m", int(g_altitude) );

    u8g2.drawBox(00,22,54,10);
    u8g2.setDrawColor(0);
    u8g2.drawStr( 0, 30, tmp);
    u8g2.setDrawColor(1);
}